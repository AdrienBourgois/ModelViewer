#ifndef __DEVICE_H_INCLUDED__
#define __DEVICE_H_INCLUDED__

#include <memory>
#include <GL/glew.h>
#include "maths/Matrix.h"
#include "Window.h"
#include "MeshObj.h"

namespace id
{
    class Device
    {
    public:
	Device();
	Device(Window*);
        ~Device();

	GLint getView() {return this->view_loc;}
	GLint getWorld() {return this->world_loc;}
	GLint getProj() {return this->proj_loc;}	
	GLint getVs() {return this->vs_id;}
	GLint getFs() {return this->fs_id;}
	GLint getPrg() {return this->prg_id;}

        void create();
	void load_model();
	void load();
	void update();
	void draw();

	GLuint loadShader(std::string const& name, GLint shader_type);
	GLuint loadProgram();
    private:
	Window* win;
	MeshObj* mesh;

	maths::Matrix4 view;
	maths::Matrix4 world;
	maths::Matrix4 proj;

	GLint prg_id;
	GLint vs_id;
	GLint fs_id;

	GLint world_loc;
	GLint view_loc;
	GLint proj_loc;

	float angle = 0.f;
    };
}

#endif
